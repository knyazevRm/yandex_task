# Хайпанём немножечко!
# Блокчейн (blockchain) переводится как «цепочка блоков». Это способ хранения данных,
# защищённый от подделки. Он лежит, например, в основе криптовалюты биткоин.
#
# Блокчейн — это действительно последовательность блоков,
# а в каждом блоке находится некоторая полезная информация.
# Так последовательность биткоина — список транзакций за определённый период времени:
# кто, кому, когда и сколько денег передал.
# Этот список снабжён случайным числом и некоторыми служебными данными,
# в том числе хэшем — числом,
# которое по определённой формуле зависит от остальной части блока и хэша предыдущего блока.
#
# Хэш должен быть меньше определённого числа.
# При этом формула, по которой вычисляется хэш, устроена так, что невозможно получить достаточно маленький хэш иначе,
# чем перебирая различные значения случайного числа. Поэтому если злоумышленник решит подделать блокчейн — например,
# вставить в его середину блок с записью о том, что все люди передали ему все свои деньги, — то столкнётся с проблемой.
# Ему придётся подобрать новое случайное число не только в поддельном блоке, но и во всех последующих,
# ведь хэш каждого следующего блока зависит от хэша предыдущего.
#
# Это требует невероятно больших вычислительных мощностей,
# поэтому блокчейн в целом защищён от подобных атак.


def calc_curr_hash(m, r, prev_hash):
    return 37 * (m + r + prev_hash) % 256


def hash_iteration(num, prev_hash=0):
    for i in range(num):
        curr_block = int(input())
        curr_h = curr_block % 256
        curr_r = (curr_block // 256) % 256
        curr_m = curr_block // 256 ** 2
        calc_hash = calc_curr_hash(curr_m, curr_r, prev_hash)
        if curr_h != calc_hash or calc_hash > 100:
            return i
        prev_hash = calc_hash

    return -1


if __name__ == '__main__':
    block_num = int(input())
    print(hash_iteration(block_num))